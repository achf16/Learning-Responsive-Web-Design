/*TO KNOW
@       CSS has a max function which returns the largest of a set of comma-separated values.
        For example:
                img { width: max(250px, 25vw); }
        In the above example, the width of the image will be 250px if the viewport width is less than 1000 pixels.
        If the viewport width is greater than 1000 pixels, the width of the image will be 25vw. This is because 25vw is
        equal to 25% of the viewport width.

@       The child combinator selector (>) in CSS targets only direct children of a specified parent element. This means
        it selects elements that are immediate descendants of another element, and not those nested deeper inside other
        elements.
@       The @media rule in CSS is used to apply styles based on the characteristics of the device or viewport, such as
        width, height, resolution, and orientation. It's commonly used for creating responsive designs that adapt to
        different screen sizes.
        @media (feature: value) {
                selector {
                                styles
                         }
        }

*/

/**{
        border: 1px solid green;
}*/

@media (prefers-reduced-motion: no-preference) {
        *{
                /*The scroll-behavior CSS property sets the behavior for a scrolling box when scrolling is triggered by the
                  navigation or CSSOM scrolling APIs.*/
                scroll-behavior: smooth;
        }
}


body {
        background: #6D501A;
        color: #F4FAFB;
        font-family: Brush Scrip, "serif";
        margin: 0;

}

b{
        font-weight: bold;
        text-decoration: underline;
}

#logo{
        filter: drop-shadow(5px 5px 10px rgba(0, 0, 0, 0.5));
        width: max(10rem, 16vw);
        max-height: 100%;
        padding: 0.2rem;
        aspect-ratio: 1.1/1;
        object-fit: contain;
        /*margin-top: 50px;*/
        /*position: fixed;*/
}

h1{
        text-transform: uppercase;
        color: #0E4B2D;
        font-size: min(5vw,1.2em);
        text-align: center;
}

header{
        height: 70px;
        width: 100%;
        background-color: #F4FAFB;
        border-bottom: #1A376D solid 0.5rem;
        display: flex;
        position: fixed;
        top: 0;
        justify-content: space-around;
        align-items: center;
        /*max-width: 970px;*/
}

nav {
        width: 50%;
        max-width: 300px;
        height: 70px;
}

nav > ul{
        display: flex;
        justify-content: space-evenly;
        flex-wrap: wrap;
        align-items: center;
        padding-inline-start: 0;
        margin-block: 0;        /*This established the margin of the block depending of the write direction,
                                if it's horizontal this property set the margin top and bottom. For the vertical
                                write direction sets the top-bottom too, but because the element is vertical the top
                                side is the right and the bottom the right*/
        height: 100%;
}

h1,h2{
        font-family: "Verdana", sans-serif;
}

h2{
        border-bottom: 4px solid #EBD5AD;
        margin-top: 0;
        padding-top: 60px;
}

.screenReader-only {
        /* Elements that are relatively positioned remain in the normal flow of the document. In contrast, an element
        that is absolutely positioned is taken out of the flow; thus, other elements are positioned as if it did not
        exist. The absolutely positioned element is positioned relative to its nearest positioned ancestor (i.e., the
        nearest ancestor that is not static). If a positioned ancestor doesn't exist, it is positioned relative to the
         ICB (initial containing block)*/
        position: absolute;     /*This was used for set the text out of the content and positioned it */
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;

        /*The overflow CSS shorthand property sets the desired behavior when content does not fit in the element's
        padding box (overflows) in the horizontal and/or vertical direction.*/
        overflow: hidden;

        /*The clip CSS property defines a visible portion of an element.*/
        clip: rect(0,0,0,0); /* The clip property applies only to absolutely positioned elements â€” that is,
                                   elements with position:absolute   or position:fixed*/

        /*The white-space CSS property sets how white space inside an element is handled.*/
        white-space: nowrap;
        border: 0;
}

/*In CSS, ::before creates a pseudo-element that is the first child of the selected element. It is often used to add
cosmetic content to an element with the content property. It is inline by default.*/
h3::before{
        content: 'Question #';  /*The content CSS property replaces content with a generated value.*/
}

#submit_button{
        margin-bottom: 1rem;
}

nav > ul > li{
        color: #1A376D;
        margin: 0 0.2rem;
        padding: 0.2rem;
        display: block; /*Without this the menu will still in a row but with dot behind, this property is for removes those.*/
}

li > a{
        color: inherit;
        text-decoration: none;
}

nav > ul > li > a:hover{
        background-color: #6D501A;
        color: #F4FAFB;
        padding: 3px;
        /*font-weight: bold;*/
        cursor: pointer;
}

main{
        padding-top: 70px;
}

section{
        max-width: 600px;
        width: 61.8%;
        margin: 0 auto 10px auto;
}

.info_student{
        padding: 0.618rem 0 0 1rem;
}

.form-row{
        margin-top: 30px;
        padding: 0 1rem;
}

input{
        font-size: 16px;
}

.info_student input{
        width: 50%;
        text-align: left;
}

.info label{
        width: 10%;
        min-width: 60px;
        text-align: right;
}

.info_student label, .info_student input{
        display: inline-block;
}

.question-block{
        text-align: left;
        display: block;
        width: 100%;
        margin-top: 20px;
        padding-top: 5px;
}

h3{
        margin-top: 5px;
        padding-left: 15px;
        font-size: 22px;
}

.question{
        border:0;
        padding-bottom: 0;
}

.answers-list{
        list-style: none;
        padding: 0;
}

button{
        display: block;
        margin: 40px auto;
        width: 38%;
        padding: 7px;
        font-size: 23px;
        background: #CD940A;
        border: 3px solid #EBD5AD;
        filter: drop-shadow(5px 5px 10px rgba(0, 0, 0, 0.2));
        border-radius: 10px;
        color: #EBD5AD;
        font-family: inherit;
        font-weight: bold;
}
button:hover{
        background: #EBD5AD;
        color: #6D501A;
}

footer{
        background-color: #F4FAFB;
        display:flex;
        justify-content: center;
        border-top:  solid 0.5rem;
        padding: 0.3em;
        text-align: center;
        margin-top: 40px;
        font-family: inherit;
}

footer, footer a{
        color: #1A376D;
}

/*
header *{
        max-width: 100px;
}*/
